<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.xmh.web.blogserver.mapper.ArticleMapper">

    <cache eviction="FIFO" flushInterval="60000" size="512" readOnly="true"/>

    <sql id="selectAll">
        SELECT a.*,c.cate_name,tp.type_name from article a
        LEFT JOIN category c on a.cate_id=c.cate_id
        LEFT JOIN types tp ON tp.type_id=a.type_id
    </sql>

    <insert id="insertArticle" keyColumn="article_id" keyProperty="articleId" useGeneratedKeys="true">
        insert into article (title, md_content, html_content, summary, type_id, cate_id, publish_time,
        update_time, recommend, article_state, views, likes, comments,user_id)
        values (#{title},#{mdContent},#{htmlContent},#{summary},
        #{typeId},#{cateId},#{publishTime},#{updateTime}
        ,#{recommend},#{articleState},#{views},#{likes},#{comments},#{userId})
    </insert>

    <update id="updateByArticleId">
        update article set title=#{title}, md_content=#{mdContent}, html_content=#{htmlContent}, summary=#{summary},
        type_id=#{typeId}, cate_id=#{cateId},update_time=#{updateTime},recommend=#{recommend},
        article_state=#{articleState}
        where article_id=#{articleId}
    </update>

    <update id="resetArticleState">
        update article set article_state=#{article_state},update_time=#{time} where article_id=#{article_id}
    </update>

    <delete id="deleteByArticleId">
        delete from article where article_id=#{article_id}
    </delete>

    <delete id="recycleArticle">
        DELETE FROM article WHERE article_state = -1 and
        update_time &gt;=#{start} and update_time &lt;=#{end}
    </delete>

    <select id="getLikeTitleArticle" resultType="cn.xmh.web.blogserver.model.Article">
        <include refid="selectAll"></include>
        where title like concat('%',#{title},'%')
    </select>

    <select id="getNewRecommend" resultType="java.util.Map">
        SELECT article_id,title FROM article WHERE recommend=1 ORDER BY publish_time DESC LIMIT 5
    </select>

    <select id="getNewTitle" resultType="java.util.Map">
        SELECT article_id,title FROM article ORDER BY publish_time DESC LIMIT 4
    </select>

    <select id="getTypeArticle" resultType="cn.xmh.web.blogserver.model.Article">
        <include refid="selectAll"></include>
        where type_name=#{type_name}
    </select>

    <select id="getArticleByTagId" resultType="cn.xmh.web.blogserver.model.Article">
        <include refid="selectAll"></include>
        LEFT JOIN article_tags t ON a.article_id=t.article_id
        WHERE tag_id=#{tag_id}
        and title like concat('%',#{title},'%')
    </select>

    <select id="getArticleByCateNameAndTitle" resultType="cn.xmh.web.blogserver.model.Article">
        <include refid="selectAll"></include>
        WHERE c.cate_name=#{cate_name}
        and title like concat('%',#{title},'%')
    </select>

    <select id="getYearsCountArticle" resultType="java.util.Map">
        SELECT YEAR(publish_time) years,COUNT(article_id) counts FROM article GROUP BY years ORDER BY years DESC
    </select>

    <select id="getMonthsByYear" resultType="java.util.Map">
        SELECT COUNT(article_id) monthCount, month(publish_time) months FROM article
        WHERE YEAR(publish_time)=#{year} GROUP BY month(publish_time)
    </select>

    <select id="getInfoByMonthYear" resultType="java.util.Map">
        SELECT article_id,title,publish_time,cate_name,type_name
        FROM article a LEFT JOIN category c on a.cate_id=c.cate_id
        LEFT JOIN types t on a.type_id =t.type_id
        WHERE MONTH(publish_time)=#{month} AND YEAR(publish_time)=#{year}
    </select>

    <select id="getTotalData" resultType="java.util.Map">
        SELECT SUM(views) 'views',SUM(likes) 'likes',SUM(comments) 'comments' ,COUNT(article_id) 'articles' FROM article
    </select>

    <select id="getArticleById" resultType="cn.xmh.web.blogserver.model.Article">
        select * from article where article_id=#{article_id}
    </select>

    <select id="getArticleByDelete" resultType="cn.xmh.web.blogserver.model.Article">
        <include refid="selectAll"></include>
        where article_state = -1
        ORDER BY update_time
    </select>

    <select id="getArticleByNotDelete" resultType="cn.xmh.web.blogserver.model.Article">
        <include refid="selectAll"></include>
        where article_state != -1
        ORDER BY update_time
    </select>

    <select id="getArticleNum" resultType="java.lang.Integer">
        select COUNT(article_id) from article
    </select>

    <select id="getAllPage" resultType="cn.xmh.web.blogserver.model.Article">
        <include refid="selectAll"></include>
    </select>

    <select id="getAllArticleId" resultType="java.lang.Long">
        select article_id from article where article_state=1
    </select>

    <select id="getArticleInfoById" resultType="java.util.Map">
        SELECT a.article_id,title,html_content,type_name,cate_name,nickname,user_face,a.update_time,recommend,views,likes,comments
        from article a
        LEFT JOIN user u on a.user_id=u.user_id
        LEFT JOIN types t on a.type_id=t.type_id
        LEFT JOIN category c on a.cate_id=c.cate_id
        WHERE a.article_id=#{article_id}
    </select>

    <select id="getMarkdownInfoById" resultType="java.util.Map">
        SELECT a.article_id,title,md_content,a.type_id,a.cate_id,nickname,user_face,recommend
        from article a
        LEFT JOIN user u on a.user_id=u.user_id
        LEFT JOIN types t on a.type_id=t.type_id
        LEFT JOIN category c on a.cate_id=c.cate_id
        WHERE a.article_id=#{article_id}
    </select>

    <select id="getArticleByTitle" resultType="cn.xmh.web.blogserver.model.Article">
        <include refid="selectAll"></include>
        where title =#{title}
    </select>

</mapper>